Topological Sorting vs Depth First Traversal (DFS): 
In DFS, we print a vertex and then recursively call DFS for its adjacent vertices. In topological sorting, we need to print a vertex before its adjacent vertices. 

For example, In the above given graph, the vertex ‘5’ should be printed before vertex ‘0’, but unlike DFS, the vertex ‘4’ should also be printed before vertex ‘0’. So Topological sorting is different from DFS. For example, a DFS of the shown graph is “5 2 3 1 0 4”, but it is not a topological sorting.

Algorithm for Topological Sorting:
Prerequisite: DFS

We can modify DFS to find the Topological Sorting of a graph. In DFS, 

We start from a vertex, we first print it, and then 
Recursively call DFS for its adjacent vertices. 
In topological sorting:

We use a temporary stack. 
We don’t print the vertex immediately, 
We first recursively call topological sorting for all its adjacent vertices, then push it to a stack. 
Finally, print the contents of the stack. 
Note: A vertex is pushed to stack only when all of its adjacent vertices (and their adjacent vertices and so on) are already in the stack

Approach:

Create a stack to store the nodes.
Initialize visited array of size N to keep the record of visited nodes.
Run a loop from 0 till N :
if the node is not marked True in visited array then call the recursive function for topological sort and perform the following steps:
Mark the current node as True in the visited array.
Run a loop on all the nodes which has a directed edge to the current node
if the node is not marked True in the visited array:
Recursively call the topological sort function on the node
Push the current node in the stack.
Print all the elements in the stack.
